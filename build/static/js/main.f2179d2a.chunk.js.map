{"version":3,"sources":["assets/zh.jpg","config/fire.js","Signup.js","Login.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Component","Login","props","handleChangeColor","newColor","setState","color","login","bind","handleChange","signup","state","email","password","clearTimeout","this","timer","e","preventDefault","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","createUserWithEmailAndPassword","target","name","value","setTimeout","window","gapi","signin2","render","width","height","onsuccess","theme","class","src","zh","alt","onChange","type","id","aria-describedby","placeholder","onClick","href","Home","logout","signOut","audio","App","user","authListener","onAuthStateChanged","className","style","backgroundColor","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2179d2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zh.e7237bd3.jpg\";","import firebase from 'firebase';\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyCuqcyFYScgCnWAiXXbADdMfZGvC-hWs70\",\r\n    authDomain: \"webams-724b0.firebaseapp.com\",\r\n    databaseURL: \"https://webams-724b0.firebaseio.com\",\r\n    projectId: \"webams-724b0\",\r\n    storageBucket: \"webams-724b0.appspot.com\",\r\n    messagingSenderId: \"200661937114\",\r\n    appId: \"1:200661937114:web:bfd3a035f8965920f12ee3\",\r\n    measurementId: \"G-C3337Q5WV0\"\r\n  };\r\n//   firebase.initializeApp(firebaseConfig);\r\n//   firebase.analytics();\r\n// </script>\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nexport default fire;\r\n","// import React, { Component } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import fire from './config/fire';\r\n\r\n// class Signup extends Component {\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.login=this.login.bind(this);\r\n//         this.handleChange=this.handleChange.bind(this);\r\n//         this.signup = this.signup.bind(this);\r\n//         this.state={\r\n//             email:'',\r\n//             password:''\r\n//         }\r\n//     }\r\n\r\n//     login(e){\r\n//         e.preventDefault();\r\n//         fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u) =>{\r\n//         }).catch((error) => {\r\n//             console.log(error);\r\n//         });\r\n//     }\r\n//     signup(e){\r\n//         e.preventDefault();\r\n//         fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\r\n//             console.log(error);\r\n//         });\r\n//     }\r\n\r\n\r\n//     handleChange(e) {\r\n//         this.setState({[e.target.name]: e.target.value});\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <div className = \"col-md-6\">\r\n//                 <h1>Hey this is sign up page</h1>\r\n//                 <form>\r\n//                     <div class= \"form-group\">\r\n                            \r\n//                         <label for=\"exampleInputEmail\"> Email address</label>\r\n//                         <input value ={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\"\r\n//                         class=\"form-control\" id=\"exampleInputEmail\" aria-describedby=\"emailHelp\"\r\n//                         placeholder=\"Enter email\" />\r\n//                         <small id = \"emailHelp\" class =\"form-text text-muted\"> We'll neever share your email woth anyone else.</small>\r\n\r\n//                     </div>\r\n\r\n//                     {/* <div class= \"form-group\">\r\n//                         <label for=\"exampleInputPassword\"> Password</label>\r\n//                         <input value ={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\"\r\n//                         class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n//                         <small id = \"emailHelp\" class =\"form-text text-muted\"> We'll neever share your email woth anyone else.</small>\r\n//                     </div>\r\n//                     {/* <button type = \"submit\" onClick={this.login} class= \"btn btn-primary\">Login</button> */}\r\n//                     {/* <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success\">SignUp</button>                                             */} */}\r\n//                 </form>\r\n                \r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Signup;\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport fire from './config/fire';\r\n\r\nclass Signup extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.logout = this.logout.bind(this);\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-6\">\r\n                <h1>sign up page</h1>\r\n               \r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n","import React, { Component } from 'react';\r\nimport { Link, BrowserRouter} from 'react-router-dom';\r\nimport fire from './config/fire';\r\nimport Signup from './Signup';\r\nimport zh from './assets/zh.jpg';\r\n\r\nconst GOOGLE_BUTTON_ID = 'google-sign-in-button';\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.login=this.login.bind(this);\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.signup = this.signup.bind(this);\r\n        this.state={\r\n            email:' ',\r\n            password:' ',\r\n            color:'blue',\r\n        }\r\n    }\r\n\r\n    handleChangeColor=(newColor)=>{\r\n        this.setState({\r\n            color:newColor\r\n        })\r\n\r\n       \r\n    }\r\n    // componentDidMount(){\r\n    //     this.timer=setTimeout(\r\n    //         ()=> this.handleChangeColor('red'),1000*3 )\r\n    // }\r\n    componentWillUnmount(){\r\n        clearTimeout(this.timer)\r\n    }\r\n\r\n    login(e){\r\n        e.preventDefault();\r\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u) =>{\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n    signup(e){\r\n        e.preventDefault();\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timer=setTimeout(\r\n        ()=> this.handleChangeColor('red'),1000*1)\r\n\r\n          window.gapi.signin2.render(\r\n            GOOGLE_BUTTON_ID,\r\n            {\r\n              width: 130,\r\n              height: 50,\r\n              onsuccess: this.login,\r\n              theme:'dark',\r\n            },\r\n          );\r\n        }\r\n\r\n    render(){\r\n        return(\r\n\r\n           <div> \r\n               <div class = \"pic-div\"> \r\n               <img src={zh} class=\"pic\" alt=\"zhcet-logo\" />   \r\n                </div>\r\n                <form>\r\n                    <div class= \"form-group\">\r\n                        {/* <h1 style={{color:this.state.color}}>AMS-ZHCET</h1> */}\r\n                        <h1 class = \"blinking\">AMS-ZHCET</h1>\r\n                        {/* <label for=\"exampleInputEmail\"> Email address</label> */}\r\n                        <input value ={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\"\r\n                        class=\"form-control\" id=\"exampleInputEmail\" aria-describedby=\"emailHelp\"\r\n                        placeholder=\"Enter email\" value={this.state.email} required/>\r\n                        \r\n                    </div>\r\n\r\n                    <div class= \"form-group\">\r\n                        {/* <label for=\"exampleInputPassword\"> Password</label> */}\r\n                        <input value ={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\"\r\n                        class=\"form-control\" id=\"exampleInputPassword\" placeholder=\"Password\" value={this.state.password} required/>\r\n                      \r\n                    </div>\r\n                    <button type = \"submit\" onClick={this.login} class= \"primary\">Login</button>\r\n                    <button onClick={this.signup} class=\"success\">SignUp</button>  \r\n                    <h5>Or signIn using</h5> <div id={GOOGLE_BUTTON_ID} />\r\n                    {/* adding google sign in button */}\r\n                   \r\n                    \r\n                </form>\r\n                <h3>Developed by: <a href=\"https://github.com/rajneesh44\">Rajneesh Sharma</a> | <a href=\"https://github.com/Bhanups123\">Bhanu Pratap Singh</a></h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport fire from './config/fire';\r\nimport Webcam from \"react-webcam\";\r\n \r\nconst WebcamComponent = () => <Webcam />;\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    logout() {\r\n        fire.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h1>You are home</h1>\r\n                <Webcam\r\n                    audio={false}\r\n                    height={720}\r\n                    // ref={webcamRef}\r\n                    // screenshotFormat=\"image/jpeg\"\r\n                    // width={1280}\r\n                    // videoConstraints={videoConstraints}\r\n      />\r\n                <button onClick={this.logout}>Logout</button>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport fire from './config/fire';\r\nimport Login from './Login';\r\nimport Home from './Home';\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state= {\r\n      user: {},\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.authListener();\r\n  }\r\n\r\n  authListener(){\r\n    fire.auth().onAuthStateChanged((user) => {\r\n     // console.log(user);\r\n      if(user){\r\n        this.setState({user});\r\n     //   localStorage.setItem('user', user.uid);\r\n      }\r\n      else{\r\n        this.setState({user:null});\r\n     //   localStorage.removeItem('user');\r\n      }\r\n    });\r\n  }\r\nrender(){\r\n  return (\r\n    <div className=\"container\" style={{backgroundColor: '#282c34'}}>\r\n     {this.state.user ? (<Home />) : (<Login/>)}\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n  \r\n\r\n// import React, { Component } from 'react';\r\n// import { Route } from 'react-router-dom';\r\n// import Login from './Login';\r\n// // import Register from '.S';\r\n// // import './App.css';\r\n\r\n// class App extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"container\">\r\n//         <Route exact path=\"/\" component={Login} />\r\n//         {/* <Route path=\"/register\" component={Register} /> */}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}